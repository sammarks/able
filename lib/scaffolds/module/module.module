<?php

use AbleCore\Modules\PathManager;
use AbleCore\Modules\BlockManager;
use AbleCore\Modules\ThemeManager;

/*
 * Welcome to Able Core!
 *
 * This scaffold module was created by the Able Core CLI and serves as
 * an aid for introducing the Able Core module helpers. The code in this
 * file serves as an example for what is possible using the module
 * helpers.
 *
 * If this isn't your first fling, you're probably better off using
 * the empty scaffold (able scaffold:module --empty).
 *
 * If you're using this scaffold module in a production website, be sure
 * that you delete all the example code and comments as it's very messy
 * to have them in all of our production websites. Clean code is happy
 * code :)
 *
 * For more information about how each of these classes work, refer to
 * the comments within their functions.
 *
 * If you have any questions or run into issues, feel free to create a new
 * issue on the main ablecore repository.
 *
 * If you have a new feature that you'd like to add to the core, clone the
 * repository to your computer and add it! Once you're finished, just submit
 * a pull request to get your changes merged back into the main project.
 *
 * Enjoy!
 */

/*
 * About this File
 *
 * This file should only contain high-level Drupal hooks (like hook_menu(),
 * hook_theme(), hook_block_info(), etc). Any other utility functions should
 * be added to helper files (files ending in ".inc" inside the "helpers/"
 * folder of the module).
 *
 * These files should have hyphens in their name. As a convention, all
 * filenames should have hyphens and not underscores.
 */

/**
 * Implements hook_ablecore()
 */
function MODULE_ablecore()
{
	/*
	 * First and foremost, we must declare the current module as an Able Core
	 * module so that we can take advantage of all the autoloading functionality
	 * (and some other nifty features in the future). This hook is not meant
	 * to contain any code, and is not ever called. It is simply meant to let Able
	 * Core know that the current module requires the features of Able Core.
	 *
	 * Commonly, you'll see this function represented like so:
	 *
	 * function MODULE_ablecore() {}
	 *
	 * Because it's not meant to have any code, there's no reason to waste space by
	 * moving the brackets to separate lines.
	 */
}

function MODULE_menu()
{
	/*
	 * This is your hook_menu() function. Basically, this tells Drupal which
	 * URLs go to which functions in your module. hook_menu() is extremely
	 * flexible. Here are a few reasons why:
	 *
	 *  - Separates logic and display into two separate files.
	 *  - Allows callback functions to be introduced for the following
	 *    purposes:
	 *     - Setting the title of the page (title callback)
	 *     - Getting the content of the page (page callback)
	 *     - Checking permissions on the page (access callback)
	 *
	 * If you're curious about what hook_menu() has to offer, take a look at
	 * this page: https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_menu/7
	 *
	 * Normally, hook_menu() accepts an array of configuration values.
	 * Unfortunately, if the module is large, this array can get quite messy.
	 * That's where PathManager comes in! The primary goal of PathManager is
	 * to make code for the hook_menu() function cleaner and easier to read.
	 * It does this by attempting to put every declaration on one line instead
	 * of three.
	 *
	 * Let's look at some examples!
	 */

	/*
	 * First, we have to start with a return statement. "Starting with a return
	 * statement?" you ask. Why, of course! We put the return statement at the
	 * top of the function because the entire function is a chain of calls to
	 * the PathManager class. It's pretty, trust me.
	 */
	return PathManager::init()

		/*
		 * This is the simplest way for declaring a menu item. The define function
		 * accepts three arguments (in its simplest form):
		 *
		 *  - path - This is the path for the menu item. Placeholders of any type
		 *    are denoted with %. You can put placeholders in any part of the
		 *    path you want.
		 *  - callback - This argument is a string in the format of file@function.
		 *    In this example, when viewing this page Drupal will look for
		 *    an action_testing function inside callbacks/file.php. Any arguments
		 *    mentioned in the path will be passed as arguments to the callback.
		 *    For example, if we have the path test/%/path/%, two arguments will
		 *    be passed to the callback. They are passed in the order that they
		 *    appear in the path. It's also important to note that this accepts
		 *    function names as well. For example, you can use "drupal_get_form" here
		 *    instead of having a page that calls it.
		 *  - title - This is simply the title of the page. If you're using something
		 *    fancy like "title callback", this value is ignored.
		 */
		->define('test/path/%', 'file@testing', 'Test Path')

		/*
		 * Let's go even further! Let's say you want to have a function called to
		 * determine the title of a page. Simple.
		 *
		 * The fourth argument of the define() function is an array of extra
		 * configuration values. These values are merged into the main configuration
		 * before returning the array to send to Drupal.
		 *
		 * Let's say you have the path hello/world, and you want the title of
		 * that path to be the current unix timestamp. Here's how you would do it:
		 *
		 * (refer to action_date_title in callbacks/file.php for the rest of this
		 * implementation)
		 */
		->define('hello/world', 'file@date', 'Test Path', array(
			'title callback' => 'action_date_title'
		))

		/*
		 * Let's talk about a few conventions that are in place here.
		 *
		 *  - Filenames have hyphens only - Do not put underscores in the filename.
		 *    This is for consistency.
		 *  - Actions have underscores only - Since the action is prefixed with action_,
		 *    make sure your action only has an underscore. For example "test-file@test_action"
		 *    is correct while "test_file@test-action" is not.
		 *  - When creating a callback function for a title, only add "title callback"
		 *    to the extra configuration array. "title arguments" is required by Drupal, but is
		 *    automatically set to the same arguments passed to the main page callback.
		 *     - If you wish to override the arguments, simply create a "title arguments"
		 *       key in the extra configuration array.
		 */

		/*
		 * Now let's say you want to pass some default arguments to the callback.
		 *
		 * Let's say we have the path test/path2 and want to pass an argument of the
		 * value "world."
		 *
		 * This is where the fifth argument for the define() function comes in! The fifth
		 * argument is an array of default arguments to pass to the function. Anything
		 * added to this array is added after the arguments generated by the path. In this
		 * example, we don't have any arguments generated by the path.
		 */
		->define('test/path2', 'file@test_path_2', 'Test Path 2', array(), array(
			'world'
		))

		/*
		 * Now let's say you have a group of pages you want to be locked down with a
		 * specific set of user permissions. In order to do this, we'll be using the
		 * access() function in the PathManager class.
		 *
		 * For this example, let's say you want two pages all locked down under the
		 * "test permission," so that only users who possess "test permission" will
		 * be able to access the pages.
		 */
		->access(array('test permission'))
			->define('test/path3', 'file@test_path_2', 'Test Path 3')
			->define('test/path4', 'file@test_path_2', 'Test Path 4')

		/*
		 * Note that when you're done with the access block, you'll have to call the
		 * fin() function.
		 */
		->fin()

		/*
		 * When you're finished with the entire set of path declarations, make sure you
		 * call the fin() function to finish it all off and return the result.
		 */
		->fin();
}

function MODULE_theme()
{
	/*
	 * This is your hook_theme() function. This function tells Drupal core
	 * what theme hooks to register. Theme hooks contain all the HTML
	 * for a specific component. Typically, theme hooks are called using
	 * Drupal's theme() function with an array of variables to pass to the
	 * theme hook.
	 *
	 * Normally, theme hooks are defined in a massive array with all the
	 * configuration options. That's why the ThemeManager class was created.
	 * It's a solution, much like the PathManager that lets us define theme
	 * hooks in one line instead of 5.
	 *
	 * There is one major part for defining a theme: its key. That's about it.
	 */

	/*
	 * First, you have to initialize the ThemeManager with the same return
	 * style as with the PathManager.
	 */
	return ThemeManager::init()

		/*
		 * Here's our basic define() call again. The arguments to pass are
		 * pretty self-explanatory:
		 *
		 *  - key - This is how the theme is identified. If you set the key
		 *    to be 'test_theme', when calling theme(), you'll do it like this:
		 *    theme('test_theme', array());
		 */
		->define('test_theme')

		/*
		 * Here's another example. This one employs some conventions used by
		 * the block manager.
		 *
		 * Let's use the block below as an example. It's called 'test_block'.
		 * When the automation functions look for a theme hook to render the
		 * contents of the block, they look for a theme that follows this
		 * pattern:
		 *
		 *  block_[block_name]
		 *
		 * Therefore, because our block is called 'test_block', it'll look
		 * for the following theme hook when rendering the block:
		 *
		 *  block_test_block
		 *
		 * Then, inside your theme you can create a template named like the
		 * following:
		 *
		 * block-test-block.tpl.php.
		 */
		->define('block.test_block')

		/*
		 * Finally, call the fin() function when you're finished defining your
		 * theme hooks.
		 */
		->fin();

	/*
	 * One last thing...
	 *
	 * The ac_global module associates preprocess functions with each theme.
	 * Here's a fun tidbit about Drupal theme hooks! Have you worked with
	 * THEME_preprocess_page, THEME_preprocess_html or THEME_preprocess_node?
	 * Of course you have! page, html and node are actually names of theme
	 * hooks. The official definition of HOOK_preprocess is the following:
	 *
	 *  HOOK_preprocess_THEME_HOOK
	 *
	 * HOOK being the name of the module and THEME_HOOK being the key for
	 * the theme hook defined with ThemeManager.
	 *
	 * Normally, all of these preprocess functions go in one file, but Able
	 * Core has a better way! Why put all of these preprocess functions in one
	 * file when we can separate them out and make sure each file only has one
	 * purpose?
	 *
	 * Let's start with a simple example.
	 *
	 * You have a theme hook with the name 'test_theme_hook.' Able Core will look
	 * for the function 'MODULE_preprocess_test_theme_hook' in the file
	 * '<module root>/preprocessors/test-theme-hook.php'. If it can't find the file
	 * or the function, it won't do anything. If it finds the file and the function,
	 * it will call the function passing a $variables array as the first argument.
	 * If you want to pass variables to your theme hook, add them as keys to the
	 * $variables array (it's passed by reference).
	 *
	 * If you're confused, fear not! There's an example in this scaffold module
	 * with 'test_block' below.
	 */
}

function MODULE_block_info()
{
	/*
	 * And now we have the block manager...
	 *
	 * The block manager works very much like the theme and menu managers.
	 * It's simply a shortcut for defining new blocks.
	 *
	 * We begin with the return statement, as usual.
	 */
	return BlockManager::init()

		/*
		 * And then we define a block with the define() function. Here's the
		 * argument order:
		 *
		 *  - key - The machine name for the block. Take a look at the "One
		 *    Last Thing..." section above for a more advanced example of
		 *    what you can use here.
		 *  - name - This is the human name of the block. This is displayed
		 *    in the Drupal administration interface.
		 */
		->define('test_block', 'Test Block')

		/*
		 * Here's an example involving some more properties.
		 *
		 * - key - Same as above.
		 * - name - Same as above.
		 * - region - The machine name of the region the block is supposed to
		 *   belong to by default. If the region doesn't exist in the current
		 *   theme, Drupal will display a warning message and ignore the block.
		 * - weight - The default weight of the block in the assigned region.
		 *   This works just like any other Drupal weight field.
		 */
		->define('test_block_two', 'Test Block Two', 'main_content', 2)

		/*
		 * And as usual, the last argument is an array of configuration values which
		 * will override anything generated by Able Core.
		 */
		->define('test_block_three', 'Test Block Three', 'main_content', 3, array(
			'extra_key' => 'extra_value'
		))

		/*
		 * As usual, call the fin() function once you're done defining
		 * your module's blocks.
		 */
		->fin();

	/*
	 * Don't forget to read the "One Last Thing..." section above for a more
	 * complete example!
	 */
}
